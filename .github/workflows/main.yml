name: Go DevSecOps Security Pipeline
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '0 0 * * 1' # Exécute chaque lundi à minuit UTC

permissions:
  contents: read
  security-events: write # Nécessaire pour uploader les rapports SARIF
  actions: read

jobs:
  security-scans:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Checkout du code
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Configurer Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # Étape 3 : Installer les dépendances Go
      - name: Install Go dependencies
        run: go mod download

        # Étape 4 : Vérifier la compilation
      - name: Build Code
        run: go build ./...

      # Étape 5 : Nettoyer les modules Go
      - name: Tidy Go Modules
        run: go mod tidy

      # Étape 4 : GoSec - Analyse statique des vulnérabilités dans le code
      - name: Run GoSec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@v2.22.0
          export PATH=$PATH:$GOPATH/bin
          gosec -fmt=sarif -out=gosec-results.sarif -verbose -exclude-dir=test ./...
        #continue-on-error: true.

      # Étape 5 : CodeQL - Analyse sémantique avancée
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-and-quality
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results.sarif
        continue-on-error: true

      # Étape 6 : OWASP Dependency-Check - Analyse des dépendances
      - name: Run OWASP Dependency-Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'go-project'
          path: './go.mod'
          format: 'SARIF'
          out: 'dependency-check-report.sarif'
        continue-on-error: true

      # Étape 7 : Semgrep - Analyse statique personnalisable
      - name: Run Semgrep
        run: |
          pip install semgrep
          semgrep --config=p/go --sarif > semgrep-results.sarif
        continue-on-error: true

      # Étape 8 : Snyk - Analyse du code et des dépendances
      # - name: Run Snyk
      #   uses: snyk/actions/go@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: --sarif-file-output=snyk-results.sarif
      #   continue-on-error: true

      # Étape 9 : Trivy - Scanner de dépendances et conteneurs
      - name: Run Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy fs --format sarif --output trivy-results.sarif .
        continue-on-error: true

      # Étape 10 : Gosecrets - Détection des secrets codés en dur
      - name: Run Gosecrets
        run: |
          go install github.com/dominikh/gosecrets@latest
          gosecrets --output=gosecrets-results.json ./...
        continue-on-error: true

      # Étape 11 : Horusec - Plateforme d’analyse de sécurité multi-outils
      - name: Run Horusec
        run: |
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/main/deployments/scripts/install.sh | sh -s latest
          horusec start -p . -o json -O horusec-results.json
        continue-on-error: true
 
     # Étape 13 : SonarQube Scan Action  123 --
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_DOKEMON_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=dokemon
            -Dsonar.externalIssuesReportPaths=gosec-results.sarif
            -X

        #-Dsonar.externalIssuesReportPaths=gosec-results.sarif,codeql-results.sarif,dependency-check-report.sarif,semgrep-results.sarif,trivy-results.sarif
      
      
      # Étape 13 : Uploader les rapports SARIF vers GitHub Security
      - name: Upload SARIF reports
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            gosec-results.sarif
            codeql-results.sarif
            dependency-check-report.sarif
            semgrep-results.sarif 
            trivy-results.sarif
        continue-on-error: true

      # Étape 14 : Archiver les rapports JSON
      - name: Upload JSON reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            gosecrets-results.json
            horusec-results.json

#test 222