name: Go DevSecOps Security Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 1' # Every Monday at 00:00 UTC
  workflow_dispatch: {}

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Install Go dependencies
        run: go mod download

      # Uncomment the following block to enable GoSec
      # - name: Run GoSec
      #   run: |
      #     go install github.com/securego/gosec/v2/cmd/gosec@v2.22.5
      #     export PATH=$PATH:$(go env GOPATH)/bin
      #     gosec -fmt=sarif -out=gosec-results.sarif ./...
      #   continue-on-error: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          output: codeql-results.sarif

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=dokemon
            -X
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_DOKEMON_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  semgrep:
    name: Semgrep CI
    runs-on: ubuntu-latest
    if: (github.actor != 'dependabot[bot]')
    container:
      image: semgrep/semgrep

    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep
        run: semgrep ci
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
